# Generated by Django 4.2.7 on 2025-07-29 00:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        ('esg_assessment', '0001_initial'),
        ('tasks', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BenchmarkData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sector', models.CharField(max_length=50)),
                ('region', models.CharField(default='UAE', max_length=100)),
                ('benchmark_name', models.CharField(max_length=255)),
                ('environmental_average', models.FloatField()),
                ('social_average', models.FloatField()),
                ('governance_average', models.FloatField()),
                ('overall_average', models.FloatField()),
                ('sample_size', models.IntegerField()),
                ('percentile_25', models.FloatField()),
                ('percentile_50', models.FloatField()),
                ('percentile_75', models.FloatField()),
                ('data_source', models.CharField(max_length=255)),
                ('data_period', models.CharField(max_length=100)),
                ('is_current', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Benchmark Data',
                'verbose_name_plural': 'Benchmark Data',
                'ordering': ['-updated_at'],
                'unique_together': {('sector', 'region', 'benchmark_name')},
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('widget_type', models.CharField(choices=[('esg_scores', 'ESG Scores'), ('progress_tracker', 'Progress Tracker'), ('recent_activity', 'Recent Activity'), ('upcoming_tasks', 'Upcoming Tasks'), ('compliance_alerts', 'Compliance Alerts'), ('benchmark_chart', 'Benchmark Chart'), ('trend_chart', 'Trend Chart'), ('recommendations', 'Recommendations'), ('quick_stats', 'Quick Statistics')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('position_x', models.IntegerField(default=0)),
                ('position_y', models.IntegerField(default=0)),
                ('width', models.IntegerField(default=1)),
                ('height', models.IntegerField(default=1)),
                ('settings', models.JSONField(default=dict, help_text='Widget-specific configuration settings')),
                ('is_visible', models.BooleanField(default=True)),
                ('visible_to_roles', models.JSONField(default=list, help_text='User roles that can see this widget')),
                ('refresh_interval_minutes', models.IntegerField(default=30)),
                ('last_refreshed', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_widgets', to='companies.company')),
            ],
            options={
                'verbose_name': 'Dashboard Widget',
                'verbose_name_plural': 'Dashboard Widgets',
                'ordering': ['position_y', 'position_x'],
                'unique_together': {('company', 'widget_type')},
            },
        ),
        migrations.CreateModel(
            name='DashboardMetric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_type', models.CharField(choices=[('esg_score', 'ESG Score'), ('data_completion', 'Data Completion'), ('task_progress', 'Task Progress'), ('compliance_status', 'Compliance Status'), ('benchmark_comparison', 'Benchmark Comparison'), ('trend_analysis', 'Trend Analysis')], max_length=50)),
                ('metric_name', models.CharField(max_length=255)),
                ('metric_value', models.JSONField()),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('calculated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_current', models.BooleanField(default=True)),
                ('version', models.IntegerField(default=1)),
                ('calculated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_metrics', to='companies.company')),
            ],
            options={
                'verbose_name': 'Dashboard Metric',
                'verbose_name_plural': 'Dashboard Metrics',
                'ordering': ['-calculated_at'],
                'indexes': [models.Index(fields=['company', 'metric_type', 'is_current'], name='dashboard_d_company_2058a3_idx'), models.Index(fields=['period_start', 'period_end'], name='dashboard_d_period__bfe200_idx')],
            },
        ),
        migrations.CreateModel(
            name='DashboardAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('overdue_task', 'Overdue Task'), ('compliance_issue', 'Compliance Issue'), ('data_missing', 'Missing Data'), ('score_drop', 'Score Decrease'), ('deadline_approaching', 'Deadline Approaching'), ('recommendation', 'Recommendation'), ('system_notification', 'System Notification')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('action_required', models.BooleanField(default=False)),
                ('action_url', models.URLField(blank=True)),
                ('action_text', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_alerts', to='companies.company')),
                ('read_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='read_alerts', to=settings.AUTH_USER_MODEL)),
                ('related_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='esg_assessment.esgassessment')),
                ('related_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tasks.task')),
            ],
            options={
                'verbose_name': 'Dashboard Alert',
                'verbose_name_plural': 'Dashboard Alerts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['company', 'is_active', 'is_read'], name='dashboard_d_company_dd6a86_idx'), models.Index(fields=['severity', 'created_at'], name='dashboard_d_severit_445154_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('task_completed', 'Task Completed'), ('report_generated', 'Report Generated'), ('data_updated', 'Data Updated'), ('assessment_completed', 'Assessment Completed'), ('user_login', 'User Login'), ('export_download', 'Export Download')], max_length=50)),
                ('event_data', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_events', to='companies.company')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Analytics Event',
                'verbose_name_plural': 'Analytics Events',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['company', 'event_type', 'created_at'], name='dashboard_a_company_a7d523_idx'), models.Index(fields=['user', 'created_at'], name='dashboard_a_user_id_832fa9_idx')],
            },
        ),
    ]
