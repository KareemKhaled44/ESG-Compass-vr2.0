# Generated by Django 4.2.7 on 2025-07-29 00:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('esg_assessment', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('task_type', models.CharField(choices=[('data_entry', 'Data Entry'), ('evidence_upload', 'Evidence Upload'), ('document_review', 'Document Review'), ('compliance_check', 'Compliance Check'), ('assessment_completion', 'Assessment Completion')], default='data_entry', max_length=50)),
                ('category', models.CharField(choices=[('environmental', 'Environmental'), ('social', 'Social'), ('governance', 'Governance'), ('general', 'General')], default='general', max_length=50)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('blocked', 'Blocked'), ('pending_review', 'Pending Review')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=20)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('estimated_hours', models.FloatField(blank=True, null=True)),
                ('frameworks', models.JSONField(default=list, help_text='List of ESG frameworks this task relates to')),
                ('compliance_context', models.TextField(blank=True, help_text='Why this task is important for compliance')),
                ('action_required', models.TextField(blank=True, help_text='Specific action required to complete this task')),
                ('progress_percentage', models.FloatField(default=0.0)),
                ('completion_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='companies.company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('depends_on', models.ManyToManyField(blank=True, related_name='dependent_tasks', to='tasks.task')),
                ('related_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='esg_assessment.esgassessment')),
                ('related_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='esg_assessment.esgquestion')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('environmental', 'Environmental'), ('social', 'Social'), ('governance', 'Governance'), ('general', 'General')], max_length=50)),
                ('task_type', models.CharField(choices=[('data_entry', 'Data Entry'), ('evidence_upload', 'Evidence Upload'), ('document_review', 'Document Review'), ('compliance_check', 'Compliance Check'), ('assessment_completion', 'Assessment Completion')], max_length=50)),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=20)),
                ('estimated_hours', models.FloatField(blank=True, null=True)),
                ('frameworks', models.JSONField(default=list)),
                ('compliance_context', models.TextField(blank=True)),
                ('action_required', models.TextField(blank=True)),
                ('applicable_sectors', models.JSONField(default=list, help_text='Business sectors this template applies to')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Task Template',
                'verbose_name_plural': 'Task Templates',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaskProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('progress_percentage', models.FloatField()),
                ('notes', models.TextField(blank=True)),
                ('hours_worked', models.FloatField(blank=True, null=True)),
                ('milestone_reached', models.CharField(blank=True, max_length=255)),
                ('blockers_encountered', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_logs', to='tasks.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task Progress',
                'verbose_name_plural': 'Task Progress Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('is_status_update', models.BooleanField(default=False)),
                ('old_status', models.CharField(blank=True, max_length=20)),
                ('new_status', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tasks.task')),
            ],
            options={
                'verbose_name': 'Task Comment',
                'verbose_name_plural': 'Task Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='task_attachments/')),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField()),
                ('mime_type', models.CharField(max_length=100)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('attachment_type', models.CharField(choices=[('evidence', 'Evidence Document'), ('reference', 'Reference Material'), ('template', 'Template'), ('report', 'Report'), ('other', 'Other')], default='evidence', max_length=50)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tasks.task')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task Attachment',
                'verbose_name_plural': 'Task Attachments',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskReminder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('remind_before_days', models.IntegerField(default=3)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('custom_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='tasks.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task Reminder',
                'verbose_name_plural': 'Task Reminders',
                'unique_together': {('task', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['company', 'status'], name='tasks_task_company_c23f28_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['assigned_to', 'status'], name='tasks_task_assigne_b3b2bc_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['category', 'priority'], name='tasks_task_categor_469715_idx'),
        ),
    ]
